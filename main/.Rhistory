### 1. Functions ----
Matrix2Edge <- function(x){
final <- data.frame("a"=character(),"b"=character()) #an empty dataframe to add the edge list to
for (i in 1:(ncol(x)-1)){
id = paste("V", i, sep="")
edge_list <- melt(x, id = (id))
x[id] <- NULL
keeps <- c(id, "value")
edge_list <- edge_list[keeps]
colnames(edge_list) <- colnames(final)
final <- rbind(final,edge_list)
}
final <- final[!(final$b=="" | final$b==" "),]
return(final)
}
simmilarity_index <- function(x, y){
sim_index <- 1- stringdist(x, y, method = "lv")/max(nchar(as.character(x)), nchar(as.character(y)))
return(sim_index)
}
### A.1. Loading the file ----
source_file = read.csv(file.choose(), sep = ";", header = F)
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
View(people)
people$from <- as.character(people$from)
library(data.table)
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
from <- from[rn != '']
View(from)
top100 <- from[1:500,]
colnames(top100) <- c("person", "freq")
top100 <- top100[person != '']
selected <- people[people$from %in% top100$person,]
recipients_sep <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
recipients_sep <- recipients_sep[, list(V1)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep, selected$docs.reason)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 29 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1", "V3"), summarise,   N = length(from))#with freq
library(data.table)
library(plyr)
cdata1 <- ddply(mat_sel, c("from", "V1", "V3"), summarise,   N = length(from))#with freq
View(cdata1)
View(mat_sel)
View(mat_sel)
edge_list <- mat_sel
View(edge_list)
edge_list$V3 <- NULL
View(edge_list)
library(igraph)
adj_mat <- get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T))
adj_mm <- as.matrix(adj_mat)
View(adj_mm)
write.csv(adj_mm, file = "adj_mat_top500.csv")
graph=graph.edgelist(as.matrix(edge_list),directed=FALSE)
write.csv(edge_list, file ="edge_list_top500.csv")
(igraph)
library(igraph)
edge_list = read.csv(file.choose(), sep = ",", header = T)
edge_list$X <- NULL
graph=graph.edgelist(as.matrix(edge_list),directed=FALSE)
set.seed(12)
l <- layout.kamada.kawai(graph) #explain differnt graph layouts
V(graph)$size <- 15*(degree(graph, mode="in")/ max(degree(graph, mode="in")))
V(graph)$label.cex <- ((betweenness(graph, directed = T)+1)/(max(betweenness(graph, directed = T))+1))*2
plot(graph, layout=l, edge.arrow.size=.2, edge.curved=T, edge.color="grey")
View(edge_list)
hless <- edge_list[(edge_list$from!="h" & edge_classification$V1!="h"),]
hless <- edge_list[(edge_list$from!="h" & edge_list$V1!="h"),]
View(hless)
graphized <- function(x){
mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(x), directed=T)))
graph <- graph.adjacency(mat,mode="directed", weighted = TRUE)
return(graph)
}
graph_hless <- graphized(hless_classified)
graph_hless <- graphized(hless)
topo <- function(x){
nodes <- vcount(x)
edges <- ecount(x)
density <- graph.density(x, loops = T)
topo <- data.frame(nodes,edges,density)
return(topo)
}
topo(graph_hless)
layout1 <- layout.fruchterman.reingold(graph_hless)
plot(graph_hless,
layout=layout1,
edge.arrow.size=.1)
install.packages("tidyverse")
install.packages("sparklyr")
tt <- readPDF(PdftotextOptions="-layout")
install.packages("tm")
install.packages("tm")
library("tm")
linrary("nlp")
library("nlp")
library("NLP")
library("tm")
files <- list.files(pattern = "pdf$")
tt <- readPDF(PdftotextOptions="-layout")
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
path <- /Users/Amiros/Downloads/u.pdf
path <- "/Users/Amiros/Downloads/u.pdf"
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
dest <- "/Users/Amiros/Downloads/u.pdf"
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
cname <- file.path("/Users/Amiros/Downloads", )
cname <- file.path("/Users/Amiros/Downloads","a" )
docs <- Corpus(DirSource(cname))
library(NLP)
library(tm)
docs <- Corpus(DirSource(cname))
docs
summary(docs)
inspect(docs)
dtm <- DocumentTermMatrix(docs)
dtm <- DocumentTermMatrix(docs)
dtm <- DocumentTermMatrix(docs)
install.packages("tidyverse")
install.packages("tidyverse")
tidyverse_update()
tidyverse_update():
;
tidyverse_update():
;
tidyverse_update()
library(tidyverse)
tidyverse_update()
install.packages(openssl)
install.packages("openssl")
tidyverse_update()
ibrary(MASS)
library(MASS)
library(ISLR)
?Boston
fix(Boston)
names(Boston)
lm.fit= lm(medv~lstat)
libary(Boston)
library(Boston)
library(MASS)
library(ISLR)
lm.fit= lm(medv~lstat)
lm.fit=lm(medv∼lstat)
boston = Boston
View(boston)
lm.fit= lm(medv~lstat)
lm.fit= lm(boston.medv~boston.lstat)
boston.medv
View(boston)
boston(tax)
boston["tax"]
lm.fit= lm(boston[medv]~boston[lstat])
View(boston)
lm.fit= lm(boston["medv"]~boston["lstat"])
type(boston["medv"])
str(boston["medv"])
lm.fit= lm(boston$medv~boston$lstat)
lm.fit = lm(medv~lstat, data = Boston)
attach(Boston)
lm.fit = lm(medv~lstat)
lm.fit
summary(lm.fit)
names.(lm.fit)
names(lm.fit)
predict(lm.fit, data.frame(lstat=(c(5,10,15)))
interval = "confidence")
predict(lm.fit, data.frame(lstat=(c(5,10,15))), interval = "confidence")
predict(lm.fit, data.frame(lstat=(c(5,10,15))), interval = "prediction")
plot(medv, lstat)
plot(lstat, medv)
plot(medv, lstat)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3, color = "red")
abline(lm.fit,lwd=3, col = "red")
plot(lstat,medv,col="red")
plot(lstat,medv,pch="+")
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
lm.fit=lm(medv∼lstat+age,data=Boston)
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
lm.fit=lm(medv~.,data=Boston)
summary(lm.fit)
lm.fit=lm(medv~.-age,data=Boston)
summary(lm.fit)
lm.fit1 = update(lm.fit, ~.-indus)
summary(lm.fit)
summary(lm.fit1)
lm.fit2=lm(medv∼lstat+I(lstat^2))
lm.fit2=lm(medv~lstat+I(lstat^2))
lm.fit2
summary(lm.fit2)
anova(lm.fit, lm.fit2)
install.packages("ISLR")
install.packages("ISLR")
install.packages("XQuartz")
clear
library(ISLR)
names(Smarket)
dim(Smarket)
summary(Smarket)
pairs(Smarket)
glm.fit=glm(Direction∼Lag1+Lag2+Lag3+Lag4+Lag5+Volume , data=Smarket ,family=binomial)
glm.fit=glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume , data=Smarket ,family=binomial)
summary(glm.fit)
train = (Year<2005)
train=(Year <2005)
train=Smarket(Year <2005)
Smarket
Smarket(year)
Smarket($year)
Smarket$year
Smarket$Year
source_file = read.csv(file.choose(), sep = ";", header = F)
View(source_file)
source_file = read.csv(file.choose(), sep = ",", header = F)
library(reshape)
Matrix2Edge <- function(x){
final <- data.frame("a"=character(),"b"=character()) #an empty dataframe to add the edge list to
for (i in 1:(ncol(x)-1)){
id = paste("V", i, sep="")
edge_list <- melt(x, id = (id))
x[id] <- NULL
keeps <- c(id, "value")
edge_list <- edge_list[keeps]
colnames(edge_list) <- colnames(final)
final <- rbind(final,edge_list)
}
final <- final[!(final$b=="" | final$b==" "),]
return(final)
}
for (i in 1:(ncol(x)-1)){
id = paste("V", i, sep="")
edge_list <- melt(x, id = (id))
x[id] <- NULL
keeps <- c(id, "value")
edge_list <- edge_list[keeps]
colnames(edge_list) <- colnames(final)
final <- rbind(final,edge_list)
}
Matrix2Edge <- function(x){
final <- data.frame("a"=character(),"b"=character())
for (i in 1:(ncol(x)-1)){
id = paste("V", i, sep="")
edge_list <- melt(x, id = (id))
x[id] <- NULL
keeps <- c(id, "value")
edge_list <- edge_list[keeps]
colnames(edge_list) <- colnames(final)
final <- rbind(final,edge_list)
}
final <- final[!(final$b=="" | final$b==" "),]
return(final)
}
edge_list <- Matrix2Edge(source_file)
shiny::runApp('GitHub/network_viz/network_viz')
runApp('GitHub/network_viz/test')
runApp('GitHub/network_viz/test')
runApp('GitHub/network_viz/test')
runApp('GitHub/network_viz/test')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
gss = read.csv(file.choose()) ## choose the GSS Networks csv.file from Courseworks ##
gss$rlife = 4-gss$life
View(gss)
gss$rlife = 4-gss$life
table(gss$rlife)
educs = c("educ1", "educ2", "educ3", "educ4", "educ5")
gss$aveeduc=rowMeans(gss[, educs ], na.rm=TRUE)
summary(gss$aveeduc)
View(gss)
shiny::runApp('GitHub/network_viz/main')
lazega_friends_matrix <- as.matrix(read.csv(file.choose() ,header=TRUE,row.names=NULL,check.names=FALSE))
adj_matrix <- as.matrix(adj_file)
adj_file <- as.matrix(lazega_friends_matrix)
graph <- graph.adjacency(adj_matrix,mode="undirected",weighted=NULL)
adj_matrix <- as.matrix(adj_file)
graph <- graph.adjacency(adj_matrix,mode="undirected",weighted=NULL)
u <- shinyUI(fluidPage(
titlePanel("Social Network Analysis"),
sidebarLayout(
position = "left",
sidebarPanel(
h2("Controls"),
# import adjacency matrix and attribute matrix
fileInput('adj_file', 'Adjacency CSV file', accept = c('text/csv','.csv')),
fileInput('att_file', 'Attributes CSV file', accept = c('text/csv','.csv')),
checkboxInput('header', 'Header', TRUE),
tags$hr(),
sliderInput("sparse", "Sparsity:", 0.9, 1, 0.994,0.002),
numericInput("fmrseed", "F-R Seed:", 1234, 1, 10000, 1)
),
mainPanel(
h2("Network Graphs"),
tabsetPanel(
tabPanel("Fruchterman-Reingold", plotOutput("fmr")),
tabPanel("Dendro", dendroNetworkOutput("dendro")),
tabPanel("Diagonal", diagonalNetworkOutput("diagonal")),
tabPanel("All",
fluidRow(column(width=6,h3("FMR",align="center"),plotOutput("fmr1")),
column(width=6,h3("Dendro",align="center"),dendroNetworkOutput("dendro1",width=w,height=h))),
fluidRow(column(width=6,h3("Diagonal",align="center"),diagonalNetworkOutput("diagonal1",width=w,height=h)))
)
)
)
))
)
w <- "240px"
h <- "240px"
u <- shinyUI(fluidPage(
titlePanel("Social Network Analysis"),
sidebarLayout(
position = "left",
sidebarPanel(
h2("Controls"),
# import adjacency matrix and attribute matrix
fileInput('adj_file', 'Adjacency CSV file', accept = c('text/csv','.csv')),
fileInput('att_file', 'Attributes CSV file', accept = c('text/csv','.csv')),
checkboxInput('header', 'Header', TRUE),
tags$hr(),
sliderInput("sparse", "Sparsity:", 0.9, 1, 0.994,0.002),
numericInput("fmrseed", "F-R Seed:", 1234, 1, 10000, 1)
),
mainPanel(
h2("Network Graphs"),
tabsetPanel(
tabPanel("Fruchterman-Reingold", plotOutput("fmr")),
tabPanel("Dendro", dendroNetworkOutput("dendro")),
tabPanel("Diagonal", diagonalNetworkOutput("diagonal")),
tabPanel("All",
fluidRow(column(width=6,h3("FMR",align="center"),plotOutput("fmr1")),
column(width=6,h3("Dendro",align="center"),dendroNetworkOutput("dendro1",width=w,height=h))),
fluidRow(column(width=6,h3("Diagonal",align="center"),diagonalNetworkOutput("diagonal1",width=w,height=h)))
)
)
)
))
)
adj_matrix <- as.matrix(input$adj_file)
graph <- graph.adjacency(adj_matrix,mode="undirected",weighted=NULL)
attributes <- input$att_file
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
vertex_attr(graph, index=attr$ID) <- attr
attr <- read.csv(input$attr_file, header=input$header)
adj_matrix <- as.matrix(read.csv(file.choose() ,header=TRUE,row.names=NULL,check.names=FALSE))
graph <- graph.adjacency(adj_matrix,mode="undirected",weighted=NULL)
attributes <- read.csv(file.choose(), header=TRUE) # see  Lazega-atts.csv  on Courseworks
vertex_attr(graph, index=attributes$ID) <- attributes
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
fit <- hclust(dist(adj_matrix()))
adj_matrix <- reactive({
adj_matrix <- as.matrix(read.csv(input$adj_file ,header=TRUE,row.names=NULL,check.names=FALSE))
graph <- graph.adjacency(adj_matrix,mode="undirected",weighted=NULL)
})
attributes <- reactive({
attributes <- read.csv(input$attr_file, header=TRUE)
vertex_attr(graph, index=attributes$ID) <- attributes
})
fit <- reactive({
fit <- hclust(dist(adj_matrix()))
})
fit <- hclust(dist(adj_matrix)
fit <- hclust(dist(adj_matrix))
fit <- hclust(dist(adj_matrix))
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
adj_file <- read.csv('/Users/Amiros/Downloads/matrix.csv' ,header=TRUE,row.names=NULL,check.names=FALSE)
attributes <- read.csv('/Users/Amiros/Downloads/atts.csv', header=TRUE) # see  Lazega-atts.csv  on Courseworks
one_direction_edges <- data.frame(get.edgelist(graph))
mat <- as.matrix(adj_file)
g <- graph.adjacency(mat, weighted = T, mode = "undirected")
vertex_attr(g, index=attributes$ID) <- attributes
g <- simplify(g)
V(g)$label <- V(g)$name
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/test')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
graph <- graph.adjacency(mat, weighted = T, mode = "undirected")
one_direction_edges <- data.frame(get.edgelist(graph))
vertex_attr(graph, index=attributes$ID) <- attributes
all_edges_with_attributes <- merge(all_edges, #  Merging our exisitng list of edges
setNames(attributes,  # With a new data.frame created from `lazega_attributes`
paste0(names(lazega_attributes) ,'1')), # by changing the names of its
# columns to append a '1'
by='ID1') # and we want the elemments of all_edges which have a given ID1 to
all_edges_with_attributes <- merge(all_edges_with_attributes,  # except that
# we're merging with our new edge list, so that we end up
# with attributes for the first and second vertices
setNames(attributes,
paste0(names(lazega_attributes) ,'2')),
by='ID2')
graph <- graph.adjacency(mat, weighted = T, mode = "undirected")
one_direction_edges <- data.frame(get.edgelist(graph))
vertex_attr(graph, index=attributes$ID) <- attributes
colnames(one_direction_edges)  <- c('ID1', 'ID2')
all_edges <- rbind(  # Add a bunch of rows
one_direction_edges, # to our list of edges
setNames( # which are contained in a new data frame created by
one_direction_edges, # copying one_direction_edges
rev(names(one_direction_edges)) # and changing the column names to be in the reverse order
# i.e. call ID1 ID2
)
)
all_edges_with_attributes <- merge(all_edges, #  Merging our exisitng list of edges
setNames(attributes,  # With a new data.frame created from `lazega_attributes`
paste0(names(lazega_attributes) ,'1')), # by changing the names of its
# columns to append a '1'
by='ID1') # and we want the elemments of all_edges which have a given ID1 to
colnames(one_direction_edges)  <- c('ID1', 'ID2')
all_edges <- rbind(  # Add a bunch of rows
one_direction_edges, # to our list of edges
setNames( # which are contained in a new data frame created by
one_direction_edges, # copying one_direction_edges
rev(names(one_direction_edges)) # and changing the column names to be in the reverse order
# i.e. call ID1 ID2
)
)
all_edges_with_attributes <- merge(all_edges, #  Merging our exisitng list of edges
setNames(attributes,  # With a new data.frame created from `lazega_attributes`
paste0(names(attributes) ,'1')), # by changing the names of its
# columns to append a '1'
by='ID1') # and we want the elemments of all_edges which have a given ID1 to
all_edges_with_attributes <- merge(all_edges_with_attributes,  # except that
# we're merging with our new edge list, so that we end up
# with attributes for the first and second vertices
setNames(attributes,
paste0(names(attributes) ,'2')),
by='ID2')
all_edges_with_attributes$homo_gender = ifelse(
all_edges_with_attributes$gender1==all_edges_with_attributes$gender2,  # if the genders for this edge are the same
1, # the value of homo_gender is 1
0) # otherwise it's 0
all_edges_with_attributes$homo_status = ifelse(all_edges_with_attributes$status1==all_edges_with_attributes$status2, 1,0)
ego_homophily_stats <- aggregate(all_edges_with_attributes[,c('homo_gender', 'homo_status', 'gender1')], by=list(ID1=all_edges_with_attributes$ID1), FUN=mean, na.rm=TRUE)
attributes <- merge(lazega_attributes,ego_homophily_stats,  by.x="ID", by.y="ID1")
attributes <- merge(attributes,ego_homophily_stats,  by.x="ID", by.y="ID1")
summary(lm(homo_gender ~ gender, attributes))
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
clear
cls
clear()
clean
clean()
cl
ls
rm
runApp('GitHub/network_viz/main')
library(RCurl)
library(readr)
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
shiny::runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/templates/input')
runApp('GitHub/network_viz/templates/input')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
runApp('GitHub/network_viz/main')
setwd("~/GitHub/network_viz")
shiny::runApp('main')
runApp('main')
